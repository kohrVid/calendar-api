swagger: '2.0'
info:
  version: 1.0.0
  title: Calendar API
  description: API to keep track of appointments in an interview calendar
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Jessica Ete
    email: kohrVid@zoho.com
    url: 'https://www.kohrvid.com'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
host: candidatestore.swagger.io
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /:
    get:
      description: Root path
      operationId: GET /
      responses:
        '200':
          description: Calendar API root path response
          examples:
            text/html: Calendar API
  /health:
    get:
      description: Get a list of all candidates in the database
      operationId: GET /health
      responses:
        '200':
          description: Candidates response
          examples:
            text/html: OK
  /candidates:
    get:
      description: Get a list of all candidates in the database
      operationId: GET /candidates
      responses:
        '200':
          description: Candidates response
          schema:
            type: array
            items:
              $ref: '#/definitions/Candidate'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Creates a new candidate. Duplicates are not allowed
      operationId: POST /candidates
      parameters:
        - name: candidates
          in: body
          description: Candidate to add to the database
          required: true
          schema:
            $ref: '#/definitions/NewCandidate'
      responses:
        '201':
          description: candidate response
          schema:
            $ref: '#/definitions/Candidate'
        '304':
          description: candidate already exists
          examples:
            text/html: Candidate already exists
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/candidates/:id':
    get:
      description: returns a candidate based on the ID supplied
      operationId: 'GET /candidates/:id'
      parameters:
        - name: id
          in: path
          description: ID of candidate to find
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: candidate response
          schema:
            $ref: '#/definitions/Candidate'
        '404':
          description: candidate not found
          examples:
            application/json: {}
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    patch:
      description: updates a candidate based on the ID and parameters supplied
      operationId: 'PATCH /candidates/:id'
      parameters:
        - name: id
          in: path
          description: ID of candidate to edit
          required: true
          type: integer
          format: int64
        - name: candidates
          in: body
          description: Candidate parameters to update
          schema:
            $ref: '#/definitions/EditCandidate'
      responses:
        '200':
          description: candidate response
          schema:
            $ref: '#/definitions/Candidate'
        '404':
          description: candidate not found
          examples:
            application/json: {}
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single candidate based on the ID supplied
      operationId: 'DELETE /candidates/:id'
      parameters:
        - name: id
          in: path
          description: ID of candidate to delete
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: candidate deleted
          examples:
            text/html: 'Candidate #1 deleted'
        '404':
          description: candidate not found
          examples:
            application/json: {}
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  Candidate:
    title: Candidate
    description: A candidate for an interview
    type: object
    allOf:
      - $ref: '#/definitions/NewCandidate'
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
  NewCandidate:
    title: New Candidate
    description: A new candidate for an interview
    type: object
    required:
      - first_name
      - last_name
      - email
    properties:
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
  EditCandidate:
    title: Edit Candidate
    description: A edit a candidate's attributes for an interview
    type: object
    properties:
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
  Error:
    title: Error
    description: The object returned in the event of an error
    type: object
    required:
      - first_name
      - last_name
      - email
    properties:
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
